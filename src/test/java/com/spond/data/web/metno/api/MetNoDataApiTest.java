/*
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spond.data.web.metno.api;

import com.spond.data.web.metno.invoker.MetNoApiClient;
import com.spond.data.web.metno.model.METJSONForecast;
import org.junit.Test;
import org.junit.Ignore;

import org.springframework.web.client.RestClientException;

/**
 * API tests for DataApi
 */
@Ignore
public class MetNoDataApiTest {

    private final MetNoDataApi api = new MetNoDataApi(new MetNoApiClient());

    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void classicFormatGetTest() {
        Float lat = null;
        Float lon = null;
        String format = null;
        Integer altitude = null;
        String response = api.classicFormatGet(lat, lon, format, altitude);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void classicGetTest() {
        Float lat = null;
        Float lon = null;
        Integer altitude = null;
        String response = api.classicGet(lat, lon, altitude);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void compactFormatGetTest() {
        Float lat = null;
        Float lon = null;
        String format = null;
        Integer altitude = null;
        METJSONForecast response = api.compactFormatGet(lat, lon, format, altitude);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void compactGetTest() {
        Float lat = null;
        Float lon = null;
        Integer altitude = null;
        METJSONForecast response = api.compactGet(lat, lon, altitude);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void completeFormatGetTest() {
        Float lat = null;
        Float lon = null;
        String format = null;
        Integer altitude = null;
        METJSONForecast response = api.completeFormatGet(lat, lon, format, altitude);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void completeGetTest() {
        Float lat = null;
        Float lon = null;
        Integer altitude = null;
        METJSONForecast response = api.completeGet(lat, lon, altitude);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void miniFormatGetTest() {
        Float lat = null;
        Float lon = null;
        String format = null;
        Integer altitude = null;
        METJSONForecast response = api.miniFormatGet(lat, lon, format, altitude);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void miniGetTest() {
        Float lat = null;
        Float lon = null;
        Integer altitude = null;
        METJSONForecast response = api.miniGet(lat, lon, altitude);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void statusFormatGetTest() {
        String format = null;
        String response = api.statusFormatGet(format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Weather forecast for a specified place
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    public void statusGetTest() {
        String response = api.statusGet();

        // TODO: test validations
    }
    
}
